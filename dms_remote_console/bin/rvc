#!/usr/bin/env ruby
# Copyright (c) 2011 VMware, Inc.  All Rights Reserved.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))
require 'rvc'
require 'rvc/version'
require 'rvc/uri_parser'
require 'readline'
require "highline/import"
require 'pp'
require 'shellwords'
require 'yaml'
require 'backports'
require 'tempfile'
require 'trollop'


Thread.abort_on_exception = true

HighLine.use_color = ENV['TERM'] != nil

$opts = Trollop.options do
  version RVC::VERSION

  banner <<-EOS
DMS Remote Console.

Usage:
       rvc hostname:port
EOS
end


# TODO remove $shell when all references are gone
$shell = shell = RVC::Shell.new
shell.reload_modules true

# Prompt for hostname if none given. Useful on win32.
if ARGV.empty? 
  ARGV << Readline.readline("Host to connect to (host:port): ")
end



# TODO cookies, cert digests
ARGV.each do |str|
  begin
    uri = RVC::URIParser.parse str
  rescue
    puts "Failed to parse URI #{str.inspect}: #{$!.message}"
    exit 1
  end

  begin
    puts "Connecting to #{uri.host}..." if ARGV.size > 1
    scheme = uri.scheme || 'zookeeper'
    scheme_handler = RVC::SCHEMES[scheme] or RVC::Util.err "invalid scheme #{scheme.inspect}"
    scheme_handler[uri]
  rescue RVC::Util::UserError
    puts "Failed to connect to #{uri.host}: #{$!.message}"
    exit 1
  end
end


shell.completion.install
history_fn = "#{ENV['HOME']}/.rvc-history"
IO.foreach(history_fn) { |l| Readline::HISTORY << l.chomp } rescue puts "Welcome to RVC. Try the 'help' command."
begin
  history = File.open(history_fn, 'a')
rescue Errno::EACCES
  history = nil
end

if shell.connections.size == 1  and
      shell.connections.first[1].is_a? DmsVmomi::VIM # HACK
  puts "check connection"
  conn_name, conn = shell.connections.first
  shell.cmds.basic.cd shell.fs.lookup_single(conn_name)
end

if defined? Ocra
  require "net/https"
  require "digest/sha2"
  exit
end


$stderr.puts "Use the 'connect' command to connect to an ESX or VC server." if shell.connections.empty?


if Signal.list["CHLD"]
  trap "SIGCHLD" do |sig|
    begin
      while pid = Process.wait(-1, Process::WNOHANG)
      end
    rescue Errno::ECHILD
    end
  end
end


while true
  begin
    begin
      input = Readline.readline(shell.prompt, false) or break
    rescue
      puts "\n#{$!.class} during readline: #{$!.message}"
      #$!.backtrace.each { |x| puts x } if shell.debug
      next
    end
    input = input.strip
    next if input.empty?
    (history && history.puts(input); Readline::HISTORY << input) unless input == Readline::HISTORY.to_a[-1]
    shell.eval_input input
  rescue Interrupt
    puts
  end
end


shell.connections.each do |name, conn|
  conn.close if conn.respond_to? :close rescue puts("failed to close connection #{name.inspect}: #{$!.class}: #{$!.message}")
end
